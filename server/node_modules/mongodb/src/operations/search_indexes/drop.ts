<<<<<<< HEAD
import type { Document } from '../../bson';
=======
import type { Document } from 'bson';

>>>>>>> e07a47c3cd54194bc07a3957b66bc3e6538db22c
import type { Collection } from '../../collection';
import { MONGODB_ERROR_CODES, MongoServerError } from '../../error';
import type { Server } from '../../sdam/server';
import type { ClientSession } from '../../sessions';
<<<<<<< HEAD
import { type TimeoutContext } from '../../timeout';
=======
>>>>>>> e07a47c3cd54194bc07a3957b66bc3e6538db22c
import { AbstractOperation } from '../operation';

/** @internal */
export class DropSearchIndexOperation extends AbstractOperation<void> {
<<<<<<< HEAD
  constructor(
    private readonly collection: Collection,
    private readonly name: string
  ) {
=======
  constructor(private readonly collection: Collection, private readonly name: string) {
>>>>>>> e07a47c3cd54194bc07a3957b66bc3e6538db22c
    super();
  }

  override get commandName() {
    return 'dropSearchIndex' as const;
  }

<<<<<<< HEAD
  override async execute(
    server: Server,
    session: ClientSession | undefined,
    timeoutContext: TimeoutContext
  ): Promise<void> {
=======
  override async execute(server: Server, session: ClientSession | undefined): Promise<void> {
>>>>>>> e07a47c3cd54194bc07a3957b66bc3e6538db22c
    const namespace = this.collection.fullNamespace;

    const command: Document = {
      dropSearchIndex: namespace.collection
    };

    if (typeof this.name === 'string') {
      command.name = this.name;
    }

    try {
<<<<<<< HEAD
      await server.command(namespace, command, { session, timeoutContext });
=======
      await server.command(namespace, command, { session });
>>>>>>> e07a47c3cd54194bc07a3957b66bc3e6538db22c
    } catch (error) {
      const isNamespaceNotFoundError =
        error instanceof MongoServerError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound;
      if (!isNamespaceNotFoundError) {
        throw error;
      }
    }
  }
}
